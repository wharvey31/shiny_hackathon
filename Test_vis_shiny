library(shiny)
library(gggenes)
library(tidyverse)
library(here)

ui <- fluidPage(
  fileInput(
    "bed","rGFA data input",multiple=FALSE, buttonLabel="Browse",placeholder="No file selected",
    accept = c("text/plain",".txt")),
  "Bed Plot",
  plotOutput(
  "bed_plots","Graph Visualization Window",width="100%",height="400px",brush=brushOpts(id="plot_brush")
  ),
  
  
)
server <- function(input, output, session) {
  output$bed_plots <- renderPlot({
    req(input$bed)
    bed_df <- read_tsv(input$bed$datapath, col_names = T )
    colnames(bed_df) <- c("contig","start","stop","name",".","strand","..","...","rgb")
      rgb_to_hex <- function(rgb_comm){
      rgb_comm = strsplit(split = ",", x = rgb_comm) %>% unlist()
      return(rgb(red = rgb_comm[1], green = rgb_comm[2], blue = rgb_comm[3], maxColorValue = 255))
    }
    
    bed_df$hex_color<-sapply(bed_df$rgb, FUN = rgb_to_hex)
    
    ggplot(data = bed_df) + 
      gggenes::geom_gene_arrow(mapping =  aes(xmin = start, xmax = stop, y = 1, fill = hex_color))
  })

}
shinyApp(ui,server)
